---
description: 项目的程序设计架构
globs: 
alwaysApply: false
---

# 项目的程序设计架构
将使用Java设计一个模块化解决方案，该解决方案应有优秀的代码可读性以及可维护性。此解决方案包含以下组件：

## 核心架构
该项目的核心架构和目录结构如下：

com.clocliketool
├── Main.java                  // 入口点和CLI处理
├── counter
│   ├── LineCounter.java       // 抽象基础计数器类
│   ├── CppLineCounter.java    // C/C++实现
│   ├── RubyLineCounter.java   // Ruby实现（可选）
│   └── LineCountResult.java   // 结果容器
├── parser
│   ├── FileParser.java        // 解析文件的接口
│   ├── CppFileParser.java     // C/C++特定解析器
│   └── RubyFileParser.java    // Ruby特定解析器（可选）
└── util
    ├── DirectoryScanner.java  // 目录遍历
    ├── FileUtils.java         // 文件处理工具
    └── ResultFormatter.java   // 格式化显示结果

## 程序设计模式
- 策略模式：不同语言解析器实现共同接口
- 工厂模式：根据命令行的输入选择创建适当的解析器

## 关键算法

### 行分类算法：
1. 逐行读取文件
2. 跟踪注释状态（是否在多行注释内）
3. 对于每一行：
 - 如果为空/仅含空白：计为空行
 - 逐字符处理该行以处理：
    * 字符串字面量（忽略内部的注释标记）
    * 注释标记
    * 代码
 - 根据内容对行进行分类

### 文件处理流程：
1. 在目录中查找所有目标扩展名的文件（递归）
2. 对于每个文件：
 - 根据扩展名选择适当的解析器
 - 解析文件并计数行
 - 累积结果
3. 格式化并显示最终结果

### 实现考虑因素
1. 性能：
 - 使用缓冲I/O进行文件读取
 - 考虑对大型目录使用多线程
 - 尽量减少热路径中的正则表达式使用

2. 可扩展性：
 - 设计为易于添加新的语言解析器
 - 命令行参数用于语言选择

3. 错误处理：
 - 优雅处理权限问题
 - 正确报告格式错误的文件
 - 清晰的错误消息

### 命令行界面
命令行的界面设计如下：

    用法: cloc [选项] <目录>
    选项:
    --lang=<language>    指定语言（cpp, ruby, auto）
    --help               显示帮助信息



